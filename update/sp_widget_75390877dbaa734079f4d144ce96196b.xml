<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $rootScope, $element, spUtil, $window, $sce, u_cutassp) {
	if (u_cutassp.utilIsValueValidAndTrue($scope.data.uSettings.isDebugOn)) {
		console.log((new Date()).getTime()+'.Client - '+$scope.data.infotag);
	}
	//
	/* widget controller */
	var c = this;

	c.myLabel = function (_p) { return u_cutassp.fmtLabel(_p); };
	c.myLog = function() {
		if (u_cutassp.utilIsValueValidAndTrue($scope.data.uSettings.isDebugOn)) {
			console.log((new Date()).getTime()+'.HTML View - '+$scope.data.infotag);
		}
		return '';
	};
	//	
	if (typeof c.data == typeof myUndefined) { c.data = {}; }
	if (typeof c.data.articles == typeof myUndefined ) { c.data.articles = []; }
	if (typeof c.data.title == typeof myUndefined ) { c.data.title = ''; } 
	c.isSearchInput = true;
	c.isSearchDisplay = !c.isSearchInput;		
	
	//*** pagination
	$scope.gget = function() {
		get();
	};	
	function get() {
		spUtil.update($scope);
	}
	$scope.htmlTrust = function(pText) 
	{
		return $sce.trustAsHtml(pText);
	};
	
	$scope.previousPage = function() {
		$scope.data.action='page';
		if ($scope.data.pagination.currentPage > 1)
			$scope.data.pagination.currentPage = $scope.data.pagination.currentPage - 1;
		else 
			$scope.data.pagination.currentPage = 0;
		get();
	};

	$scope.nextPage = function() {
		$scope.data.action='page';
		$scope.data.pagination.currentPage = $scope.data.pagination.currentPage+1;
		get();
	};	
	
	// -----------------------------------------
	// Column sort
	//
	var myNewTitle= {
		first: "Click to sort...",
		ascend: "Click to sort descending...",
		descend: "Click to sort ascending..."
	};
	var myClassRemove= {
		ascend: "fa-caret-down",
		descend: "fa-caret-up"
	};
	var myClassAdd= {
		ascend: "fa-caret-up",
		descend: "fa-caret-down"
	};
	var myNewSortAction = {
		ascend: "sortasc",
		descend: "sortdesc"
	};	

	$scope.data.isSortOn={};
	$scope.data.action='';
	$scope.colSort = function(e) {
		var myHdrDiv = $(e.currentTarget);
		//
		var myId=myHdrDiv.attr('id');
		var myTitle=myHdrDiv.attr('title');
		var mySortState='';
		if (myTitle.indexOf("sort...")>-1) {
			mySortState= "ascend";
		} else if (myTitle.indexOf("descending...")>-1) {
			mySortState = "descend";
		} else if (myTitle.indexOf("ascending...")>-1) {
			mySortState= "ascend";
		}
		//
		var myParent = myHdrDiv.closest('div.myDivTableRow');
		var myDivSiblings = myParent.find('div');
		myDivSiblings.attr('title',myNewTitle.first);
		//
		$scope.data.isSortOn = {
			number:false,
			description:false,
			rating:false,
			published:false
		};
		//
		myHdrDiv.attr('title',myNewTitle[mySortState]);
		var myIcon = myHdrDiv.children('i').first();
		myIcon.removeClass(myClassRemove[mySortState]);
		myIcon.addClass(myClassAdd[mySortState]);
		//
		var mySortAction = '';
		switch(true) {
			case (myId.indexOf('Number')>-1):
				$scope.data.isSortOn.number = true;
				mySortAction = myNewSortAction[mySortState];
				break;
			case (myId.indexOf('Description')>-1):
				$scope.data.isSortOn.description = true;
				mySortAction = myNewSortAction[mySortState];
				break;
			case (myId.indexOf('Rating')>-1):
				$scope.data.isSortOn.rating = true;
				mySortAction = myNewSortAction[mySortState];
				break;
			case (myId.indexOf('Published')>-1):
				$scope.data.isSortOn.published = true;
				mySortAction = myNewSortAction[mySortState];
				break;
		}
		//
		//console.log(JSON.stringify($scope.data.isSortOn)+','+mySortAction);
		if (mySortAction.length>0){
			$scope.data.action = mySortAction;
			$scope.gget();
		}
	};
	//	
	// End Column Sort
	// -----------------------------------------
	
	$scope.artSearch = function(e) {
		//alert('btn');
		var myBtn=$(e.currentTarget);
		var myRoot=myBtn.closest('div.input-group');
		var myInput=myRoot.find('input');
		$scope.data.action = 'search';
		$scope.data.q = myInput.val();	
		myInput.val('');
		c.isSearchInput = false;
		c.isSearchDisplay = !c.isSearchInput;		
		get();
	};
	
	$scope.crCatchArtSearch = function(e) {
		if ( e.keyCode === 13 ) {
			var myInput=$(e.currentTarget);
			$scope.data.action = 'search';
			$scope.data.q = myInput.val();	
			myInput.val('');
			get();
			c.isSearchInput = false;
			c.isSearchDisplay = !c.isSearchInput;		
		} else {
			return false;
		}	
	};
	
	$scope.artSearchReset = function(e) {
		$scope.data.action = 'search';
		$scope.data.q = '';
		c.isSearchInput = true;
		c.isSearchDisplay = !c.isSearchInput;
		get();
	};		
}]]></client_script>
        <controller_as>c</controller_as>
        <css>h2.panel-title {
	color: #ffffff;
  	/* text-shadow: 3px 3px 5px #000000; */
}

.panel-body {
  padding:0px 10px 0px 10px;
}

.panel-footer {
   border-top: none;
}

$brand-custom:#78A6CC;
/* $brand-custom:#c2d7e8; */

.panel-custom  {
	background-color: $brand-custom;
}

.panel-primary  {
	background-color: $brand-primary;
}

.panel-info {
  background-color: $brand-info;
}

.panel-success {
  background-color: $brand-success;
}

.panel-warning {
  background-color: $brand-warning;
}

.panel-danger {
  background-color: $brand-danger;
}

.myShadow {
-webkit-box-shadow: 0px 0px 10px 4px rgba(158,158,158,0.6);
-moz-box-shadow: 0px 0px 10px 4px rgba(158,158,158,0.6);
box-shadow: 0px 0px 10px 4px rgba(158,158,158,0.6);
}

/* ********** */
/* Pagination */
a.mybtn {
    padding: 5px 10px;
    font-size: 12px;
    line-height: 1.5;
    border-radius: 3px;
}

/* ************ */
/* DivTable  */
.myDivTable{ 
  display:table; 
  width: 100%;
  table-layout: fixed;
  font-size: 12px;
}
.myDivTableRow { display:table-row; }
.myDivTableHeading { display:table-header-group;}
.myDivTableCell, .myDivTableHead { display:table-cell;}
.myDivTableHeading { display:table-header-group;}
.myDivTableFoot { display:table-footer-group;}
.myDivTableBody { display:table-row-group;}

div.myGreyGridTable {
  width:100%;
  text-align:left;
  border-collapse:collapse;
}

/* myDivTableHeading */
.myDivTable.myGreyGridTable .myDivTableHeading {
  background:#eeeeee;
}

.myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow {
  .myDivTableHead {
    font-size:10px;
  	font-weight:bold;
  	color:#000000;
  	text-align:center;
    vertical-align: middle;
  	padding:1px 1px 1px 4px;
    border-right:1px solid #bbbbbb;
  	border-bottom:1px solid #000000;    
    word-wrap: break-word;    
  }
}
.myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow   {
  .myDivTableHead.myLeft { text-align:left; }
}
#divHdrNumber,
#divHdrDescription,
#divHdrRating,
#divHdrPublished {
  &amp;:hover {
    cursor:pointer;
    font-style: italic;
    color:#428bca;
  }
}

/* myDivTableBody */
.myDivTable.myGreyGridTable .myDivTableBody {
	a.myDivTableRow {
    color:#000000;
  	width:100%;
  	height:100%; 
    border-bottom:1px solid #aaaaaa;
	}
}

.myDivTable.myGreyGridTable .myDivTableBody {
  a.myDivTableRow:hover { 
    color: #1565C0;
	  text-decoration:underline;
    font-weight: bold;
    background-color:#e6e8ea; 
  }
}

.myDivTable.myGreyGridTable .myDivTableBody {
	.myDivTableRow:nth-child(odd) { background: #ffffff; }
	.myDivTableRow:nth-child(even) { background: #f5f5f5; }
}
.myDivTable.myGreyGridTable .myDivTableBody
{
	.myDivTableRow:last-child { border-bottom-style:none;  }
}
.myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow {
  .myDivTableCell  {
      border-right:1px solid #bbbbbb; 
      padding:1px 4px;
  }
}
.myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow {
  .myDivTableCell.myCtr { text-align:center; }
}

.myColSpanAll { 
  display:table;
  width:100%;
	background: #EEEEEE;
  color: #444444;
}

/* Foot Style */
.myGreyGridTable .myTableFootStyle {
  font-weight:bold;
  color:#333333;
  border-top:1px solid #333333;
}

// Above Medium devices (tablets, 768px and up)
@media (min-width: 768.01px) 
{
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableHead.myDefLgOnlyShow { display:table-cell; }
  }
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableHead.myDefMedUpShow { display:table-cell; }
  }
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableCell.myDefMedOnlyShow { display:none; }
  }  
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow {
    .myDivTableHead:nth-last-child(1) { border-right-style:none; }
  } 
  
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow  {
    .myDivTableCell.myDefLgOnlyShow { display:table-cell; }
  }  
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow  {
    .myDivTableCell.myDefMeUpShow { display:table-cell; }
  }
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow  {
    .myDivTableCell.myDefMedOnlyShow { display:none; }
  }
  
  .myCol1 { width:10% }
  .myCol2 { width:70% }
  .myCol3 { width:10% }
  .myCol4 { 
    width:10%;
  	font-size: 10px;
  } 
  
}

// Medium devices (tablets, 768px and less)
@media (max-width: 768px) { 
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableHead.myDefLgOnlyShow { display:none; }
  }
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableHead.myDefMedUpShow { display:table-cell; }
  }  
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow {
    .myDivTableHead.myDefMedOnlyShow { display:table-cell; }
  }  
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow {
    .myDivTableHead:nth-last-child(1) { border-right-style:none; }
  }    
  
 .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow {
    .myDivTableCell.myDefLgOnlyShow { display:none; }
  }   
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow  {
    .myDivTableCell.myDefMedUpShow { display:table-cell; }
  }    
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow {
    .myDivTableCell.myDefMedOnlyShow { display:table-cell; }
  }     
  
  .myCol1 { width:15% }
  .myCol2 { width:61% }
  .myCol3 { width:10% }
  .myCol4 { 
    width:14%;
  	font-size: 10px;
  } 
}

// Small devices (landscape phones, 576px and less)
@media (max-width: 576px) { 
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableHead.myDefLgOnlyShow { display:none; }
  }
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow  {
    .myDivTableHead.myDefMedUpShow { display:table-cell; }
  }  
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow {
    .myDivTableHead.myDefMedOnlyShow { display:none; }
  }  
  .myDivTable.myGreyGridTable .myDivTableHeading .myDivTableRow {
    .myDivTableHead:nth-last-child(1) { border-right-style:none; }
  }   
  
 .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow {
    .myDivTableCell.myDefLgOnlyShow { display:none; }
  }   
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow  {
    .myDivTableCell.myDefMedUpShow { display:table-cell; }
  }    
  .myDivTable.myGreyGridTable .myDivTableBody .myDivTableRow {
    .myDivTableCell.myDefMedOnlyShow { display:none; }
  }   
  .myCol1 { 
    width:15%; 
		font-size: 10px;     
  }
  .myCol2 { width:56%; }
  .myCol3 { width:12%; }
  .myCol4 { 
    width:17%; 
		font-size: 10px;    
  }
}
.myMarginBottom10px {
   margin-bottom:10px;
}
.myRefreshButton {
  border-left:1px solid #fff;
}
.myPgTotals {
    color: #fff;
    font-size: 12px;
    position: relative;
    top: 4px;  
}
.myTextAlignCenter {
  	text-align:center;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>utassp01_kb_public_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>UTASSP KB Public Widget</name>
        <option_schema>[&#13;
  {&#13;
    "name": "color",&#13;
    "label": "Color",&#13;
    "type": "choice",&#13;
    "choices": [&#13;
      {&#13;
        "label": "Default",&#13;
        "value": "default"&#13;
      },&#13;
      {&#13;
        "label": "Custom",&#13;
        "value": "custom"&#13;
      },&#13;
      {&#13;
        "label": "Primary",&#13;
        "value": "primary"&#13;
      },&#13;
      {&#13;
        "label": "Success",&#13;
        "value": "success"&#13;
      },&#13;
      {&#13;
        "label": "Info",&#13;
        "value": "info"&#13;
      },&#13;
      {&#13;
        "label": "Warning",&#13;
        "value": "warning"&#13;
      },&#13;
      {&#13;
        "label": "Danger",&#13;
        "value": "danger"&#13;
      }&#13;
    ]&#13;
  },&#13;
  {&#13;
    "name": "knowledge_base",&#13;
    "label": "Knowledge Base",&#13;
    "type": "choice",&#13;
    "choices": [&#13;
      {&#13;
        "label": "Business Affairs Internal",&#13;
        "value": "Business Affairs Internal"&#13;
      },&#13;
      {&#13;
        "label": "Business Affairs Knowledge Base",&#13;
        "value": "Business Affairs Knowledge Base"&#13;
      },&#13;
      {&#13;
        "label": "OIT Internal",&#13;
        "value": "OIT Internal"&#13;
      },&#13;
      {&#13;
        "label": "OIT Knowledge Base",&#13;
        "value": "OIT Knowledge Base"&#13;
      },&#13;
      {&#13;
        "label": "Public Knowledge Base",&#13;
        "value": "Public Knowledge Base"&#13;
      }&#13;
    ]&#13;
  },&#13;
  {&#13;
    "hint": "Maximum number of elements that are shown",&#13;
    "name": "maxitems",&#13;
    "default_value": "20",&#13;
    "label": "Max number of elements shown in the list (only positive numbers &gt; 0, 20 otherwise)",&#13;
    "type": "integer"&#13;
  }&#13;
]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function($sp, input, data, options, gs) {
    var myU = new u_utassp();
    //var myG = new global.u_utaglobalapi();
    //gs.info('usersessionrole:'+myG.u_SessionGetRoles());	
    data.uSettings = myU.utilGetInstanceSettings($sp);
    // *** Start: Debug only code *** //
    data.infotag = '';
    if (myU.utilIsValueValidAndTrue(data.uSettings.isDebugOn)) {
        data.infotag = myU.utilLog($sp);
    }
    // *** End: Debug only code *** //
    //
    // get page id
    var myPageId = $sp.getParameter('id');
    data.pageId = myPageId;

    // populate the 'data' variable
    if (typeof data.articles == typeof myUndefined) {
        data.articles = [];
    }
    if (typeof data.title == typeof myUndefined) {
        data.title = {};
    }

    var myTitle = 'Articles: Public';
    var myMaxItems = options.maxitems;
    myMaxItems = myMaxItems > 0 ? myMaxItems : 20;
    var myFirstRow = 0;
    var myLastRow = parseInt(myMaxItems);
    var myCurrentPage = 0;

    if (typeof data.pagination == typeof myUndefined) {
        data.pagination = {};
        data.pagination.currentPage = myCurrentPage;
        data.pagination.hasNext = false;
        data.pagination.hasPrevious = false;
        data.showPagination = false;
    }

    var isPage = false;
    var isSearch = false;
    var myIsSortAsc = false;
    var myIsSortDesc = false;
    var mySortField = '';
	//gs.info('upublickb: '+JSON.stringify(input));
    if (typeof input == typeof myUndefined) {
        isPage = false;
        isSearch = false;
    } else {
        if (typeof input.action == typeof myUndefined) {
            isPage = false;
            isSearch = false;
        } else if (input.action == 'new') {
            isPage = false;
            isSearch = false;
            //Q: Page button?
        } else if (input.action == 'page') {
            //A: Yes
            isPage = true;
            isSearch = false;
            //Q: Search button?
        } else if (input.action == 'search') {
            //A: Yes
            isPage = false;
            if (typeof input.q != typeof myUndefined && (input.q)) {
                isSearch = true;
            } else {
                isSearch = false;
            }
            //Q: Sort button?
        } else if (input.action.indexOf('sort') > -1) {
            //A: Yes
            isPage = false;
            myIsSortAsc = (input.action.indexOf('asc') > -1);
            myIsSortDesc = !myIsSortAsc;
            if (typeof input.q != typeof myUndefined && (input.q)) {
                isSearch = true;
            } else {
                isSearch = false;
            }
            if (myU.utilIsValueValid(input.isSortOn)) {
                switch (true) {
                    case input.isSortOn.number:
                        mySortField = 'number';
                        break;
                    case input.isSortOn.description:
                        mySortField = 'short_description';
                        break;
                    case input.isSortOn.rating:
                        mySortField = 'rating';
                        break;
                    case input.isSortOn.published:
                        mySortField = 'published';
                        break;
                    default:
                        myIsSortAsc = false;
                        myIsSortDesc = false;
                }
            }
        }
    }

    if (isPage) {
        if (input.pagination) {
            myCurrentPage = parseInt(input.pagination.currentPage);
            myFirstRow = (myCurrentPage * parseInt(myMaxItems));
            myLastRow = parseInt(myFirstRow) + parseInt(myMaxItems);
        }
    }

    data.title = myTitle;
    data.isSearch = false;
    var qSearch = '';
    if ((data) && (data.q)) {
        isSearch = true;
        qSearch = data.q;
    } else if ((input) && (input.q)) {
        isSearch = true;
        qSearch = input.q;
    }
    var myData = {};
    if (isSearch) {
        data.isSearch = true;
        var mySearch = qSearch;
		//gs.info('kbpublic 1: '+ mySearch+','+ myFirstRow+','+ myLastRow+','+ myIsSortAsc+','+ myIsSortDesc+','+ mySortField);
        myData = myU.getKbPublicSearchArticles(
            mySearch,
            myFirstRow,
            myLastRow, 
			{
                "isSortAsc": myIsSortAsc,
                "isSortDesc": myIsSortDesc,
                "sortField": mySortField
            }
        );
        var mySearchWordList = mySearch.split(' ');
        for (var x = 0, Lx = mySearchWordList.length; x < Lx; x++) {
            var myRegEx = new RegExp(mySearchWordList[x], 'ig');
            for (var y = 0, Ly = myData.articles.length; y < Ly; y++) {
                var myResult = myData.articles[y].short_description.match(myRegEx);
                if (myResult) {
                    for (var z = 0, Lz = myResult.length; z < Lz; z++) {
                        myData.articles[y].short_description =
                            myData.articles[y].short_description.replace(
                                myResult[z],
                                '<span class="highlight mark">' + myResult[z] + '</span>'
                            );
                    }
                }
            }
        }
    } else {
		//gs.info('kbpublic 2: '+ myFirstRow+','+ myLastRow+','+ myIsSortAsc+','+ myIsSortDesc+','+ mySortField);
        myData = myU.getKbPublicArticles(
            myFirstRow,
            myLastRow, 
			{
                "isSortAsc": myIsSortAsc,
                "isSortDesc": myIsSortDesc,
                "sortField": mySortField
            }
        );
    }
    var myArticles = myData.articles;
    var myRowCount = myData.rowCount;
    data.articles = myArticles;
    data.pagination.hasNext = (
        myArticles.length == (parseInt(myLastRow) - parseInt(myFirstRow)) &&
        parseInt(myLastRow) < parseInt(myRowCount)
    );
    data.pagination.hasPrevious = parseInt(myFirstRow) > 0;
    data.pagination.showPagination = data.pagination.hasPrevious || data.pagination.hasNext;
    data.pagination.currentPage = myCurrentPage;
    data.pagination.rowcount = myRowCount;
    data.pagination.firstrow = myFirstRow;
    data.pagination.lastrow = (myLastRow > myRowCount) ? myRowCount : myLastRow;
    data.pagination.countmsg = "Items #first to #last of #total";
    if (data.pagination.showPagination) {
        data.pagination.countmsg = data.pagination.countmsg.replace('#first', data.pagination.firstrow + 1);
        data.pagination.countmsg = data.pagination.countmsg.replace('#last', data.pagination.lastrow);
        data.pagination.countmsg = data.pagination.countmsg.replace('#total', data.pagination.rowcount);
    }

})($sp, input, data, options, gs);]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>welchv</sys_created_by>
        <sys_created_on>2019-07-16 13:41:46</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>75390877dbaa734079f4d144ce96196b</sys_id>
        <sys_mod_count>58</sys_mod_count>
        <sys_name>UTASSP KB Public Widget</sys_name>
        <sys_package display_value="utassp" source="x_287765_utassp">2e58c8624f112300f006121f9310c726</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="utassp">2e58c8624f112300f006121f9310c726</sys_scope>
        <sys_update_name>sp_widget_75390877dbaa734079f4d144ce96196b</sys_update_name>
        <sys_updated_by>welchv</sys_updated_by>
        <sys_updated_on>2020-01-22 15:26:58</sys_updated_on>
        <template><![CDATA[<div>
  <div class="panel panel-{{::options.color}} b myShadow"  dummy="{{::c.myLog()}}"> 
    <div class="panel-heading">

      <div ng-class="{ myMarginBottom10px:c.isSearchInput }">
        <h2 class="h4 panel-title">{{data.title}}</h2>
      </div>
      <div id="searchText" ng-show="c.isSearchDisplay" class="ng-hide myMarginBottom10px">
        <h2 class="h4 panel-title">Search: {{data.q}}</h2>
      </div>
      <div id="searchInput" class="input-group input-group-sm mb-3">
        <input 
               class="form-control" 
               type="text"
               placeholder="Search selected articles below..." 
               aria-label="Search selected articles" 
               aria-describedby="basic-addon1"
               ng-keypress="crCatchArtSearch($event)";
               >       
        <span class="input-group-btn">
          <button 
                  name="search" 
                  type="submit" 
                  class="btn btn-outline-secondary"
                  title="Search"
                  aria-label="Search"
                  ng-click="artSearch($event)">
            <i class="fa fa-search"></i>
          </button>
          <button 
                  name="refresh" 
                  type="submit"
                  ng-show="c.isSearchDisplay"
                  class="ng-hide btn btn-outline-secondary myRefreshButton"
                  title="Reset to 'all'"
                  aria-label="Reset to 'all'"
                  ng-click="artSearchReset($event)">
            <i class="fa fa-refresh"></i>
          </button>              
        </span>	        
      </div>

    </div>
    <div class="panel-body">
      <div ng-if="(data.articles.length > 0)">
        <div class="myDivTable myGreyGridTable">
          <div class="myDivTableHeading">
            <div class="myDivTableRow">
              <div id="divHdrNumber" class="myDivTableHead myCol1" title="Click to sort..." ng-click="colSort($event)">Number
                <i id="iconNumberSortId" ng-show="data.isSortOn.number" class="ng-hide fa fa-caret-up mySortIcon"></i>
              </div>
              <div id="divHdrDescription"class="myDivTableHead myCol2" title="Click to sort..." ng-click="colSort($event)">Description
                <i id="iconDescriptionSortId" ng-show="data.isSortOn.description" class="ng-hide fa fa-caret-up mySortIcon"></i>
              </div>
              <div id="divHdrRating" class="myDivTableHead myCol3" title="Click to sort..." ng-click="colSort($event)">Rating
                <i id="iconRatingId" ng-show="data.isSortOn.rating" class="ng-hide fa fa-caret-up mySortIcon"></i>
              </div>
              <div id="divHdrPublished" class="myDivTableHead myDefMedUpShow myCol4" title="Click to sort..." ng-click="colSort($event)">Published
                <i id="iconPublishedId" ng-show="data.isSortOn.published" class="ng-hide fa fa-caret-up mySortIcon"></i>
              </div>
            </div>
          </div>
          <div class="myDivTableBody">
            <a  ng-repeat="article in data.articles" ng-href="?id=utassp01_kb_article&sys_id={{article.sys_id}}&pageid={{data.pageId}}&kbnumber={{article.kbnumber}}" class="myDivTableRow">
              <div class="myDivTableCell myCtr myCol1" ng-bind-html="article.kbnumber"></div>
              <div class="myDivTableCell myCol2" ng-bind-html="htmlTrust(article.short_description)"></div>
              <div class="myDivTableCell myCtr myCol3" ng-bind-html="article.rating"></div>
              <div class="myDivTableCell myDefMedUpShow myCtr myCol4" ng-bind-html="article.published"></div>
            </a>
          </div>
        </div>
      </div>      
      <div ng-if="!(data.articles.length > 0)">
        <div class="myDivTable myGreyGridTable">
          <div class="myDivTableHeading">
            <div class="myDivTableRow">
              <div class="myDivTableHead myCol1">Number</div>
              <div class="myDivTableHead myCol2">Description</div>
              <div class="myDivTableHead myCtr myCol3">Rating</div>
              <div class="myDivTableHead myDefMedUpShow myCol4">Published</div>
            </div>
          </div>
        </div>
        <div class="myColSpanAll">
          No articles 
        </div>
      </div>      
    </div> 
    <div class="panel-{{::options.color}} panel-footer clearfix myTextAlignCenter" ng-if="data.pagination.showPagination">
      <a id="previous-btn" href="javascript:void(0)" ng-click="previousPage()" ng-show="data.pagination.hasPrevious" class="pull-left btn btn-sm btn-default mybtn" aria-label="${Pagination button Previous}">
        <i class="fa fa-arrow-left m-r-sm" aria-hidden="true"></i>${&nbsp;Previous}</a>
      <span class="myPgTotals" ng-bind="c.data.pagination.countmsg"></span>
      <a id="next_btn" href="javascript:void(0)" ng-click="nextPage()" ng-show="data.pagination.hasNext" class="pull-right btn btn-sm btn-default mybtn" aria-label="${Pagination button Next}">
        ${Next&nbsp;}<i class="fa fa-arrow-right m-r-sm col-md-offset-3" aria-hidden="true"></i></a>
    </div>
    <div class="panel-{{::options.color}} panel-footer clearfix" ng-if="!data.pagination.showPagination">
      <a id="previous-btn" href="javascript:void(0)" ng-click="previousPage()" ng-show="data.pagination.hasPrevious" class="pull-left btn btn-sm btn-default mybtn" aria-label="${Pagination button Previous}">
        <i class="fa fa-arrow-left m-r-sm" aria-hidden="true"></i>${&nbsp;Previous}</a>
      <a id="next_btn" href="javascript:void(0)" ng-click="nextPage()" ng-show="data.pagination.hasNext" class="pull-right btn btn-sm btn-default mybtn" aria-label="${Pagination button Next}">
        ${Next&nbsp;}<i class="fa fa-arrow-right m-r-sm col-md-offset-3" aria-hidden="true"></i></a>
    </div>    
  </div>
</div>



]]></template>
    </sp_widget>
</record_update>
